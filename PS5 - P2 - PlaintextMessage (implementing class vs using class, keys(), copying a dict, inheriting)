# Problem 2 - PlaintextMessage
#  Bookmark this page
# Problem 2 - PlaintextMessage
# 15.0 points possible (graded)
# For this problem, the graders will use our implementation of the Message class, so don't worry if you did not get the previous parts correct.
# PlaintextMessage is a subclass of Message and has methods to encode a string using a specified shift value. Our class will always create an encoded version of the message, and will have methods for changing the encoding.
# Implement the methods in the class PlaintextMessage according to the specifications in ps6.py. The methods you should fill in are:
# •   __init__(self, text, shift): Use the parent class constructor to make your code more concise.
# •   The getter method get_shift(self)
# •   The getter method get_encrypting_dict(self): This should return a COPY of self.encrypting_dict to prevent someone from mutating the original dictionary.
# •   The getter method get_message_text_encrypted(self)
# •   change_shift(self, shift): Think about what other methods you can use to make this easier. It shouldn’t take more than a couple lines of code.
# Paste your implementation of the entire PlaintextMessage class in the box below.
# Code Editor


# Problem 2 : PlaintextMessage


class PlaintextMessage(Message):
    def __init__(self, text, shift):
        '''
        Initializes a PlaintextMessage object        
        
        text (string): the message's text
        shift (integer): the shift associated with this message

        A PlaintextMessage object inherits from Message and has five attributes:
            self.message_text (string, determined by input text)
            self.valid_words (list, determined using helper function load_words)
            self.shift (integer, determined by input shift)
            self.encrypting_dict (dictionary, built using shift)
            self.message_text_encrypted (string, created using shift)

        Hint: consider using the parent class constructor so less 
        code is repeated
        '''
        #pass #delete this line and replace with your code here


        Message.__init__(self,text) # inheriting init method from Message class (self.message_text & self.valid_words)
        self.shift=shift
        self.text = text
        self.encrypting_dict=Message.build_shift_dict(self,shift) # using method from superclass Message to create new atribute
        self.message_text_encrypted=Message.apply_shift(self,shift) # using method from superclass Message to create new atribute

    def get_shift(self):
        '''
        Used to safely access self.shift outside of the class
        
        Returns: self.shift
        '''
        #pass #delete this line and replace with your code here
        return self.shift
    def get_encrypting_dict(self):
        '''
        Used to safely access a copy self.encrypting_dict outside of the class
        
        Returns: a COPY of self.encrypting_dict
        '''
        #pass #delete this line and replace with your code here
        c = {}
        a = self.encrypting_dict.keys() # a list of available keys in a dict
        for i in a:
            c[i] = self.encrypting_dict[i] # copying a dict
        return c
    def get_message_text_encrypted(self):
        '''
        Used to safely access self.message_text_encrypted outside of the class
        
        Returns: self.message_text_encrypted
        '''
        #pass #delete this line and replace with your code here
        return self.message_text_encrypted
    def change_shift(self, shift):
        '''
        Changes self.shift of the PlaintextMessage and updates other 
        attributes determined by shift (ie. self.encrypting_dict and 
        message_text_encrypted).
        
        shift (integer): the new shift that should be associated with this message.
        0 <= shift < 26

        Returns: nothing
        '''
        #pass #delete this line and replace with your code here
        self.shift = shift
        self.encrypting_dict = Message.build_shift_dict(self,shift)
        self.message_text_encrypted = Message.apply_shift(self,shift)
