# Problem 9

# Write a Python function that takes in two lists and calculates whether they are permutations of each other. 
# The lists can contain both integers and strings. We define a permutation as follows:

# the lists have the same number of elements
# list elements appear the same number of times in both lists
# If the lists are not permutations of each other, the function returns False. 
# If they are permutations of each other, the function returns a tuple consisting of the following elements:

# the element occuring the most times
# how many times that element occurs
# the type of the element that occurs the most times
# If both lists are empty return the tuple (None, None, None). If more than one element occurs the most number of times, 
# you can return any of them.

# def is_list_permutation(L1, L2):
#     '''
#     L1 and L2: lists containing integers and strings
#     Returns False if L1 and L2 are not permutations of each other. 
#             If they are permutations of each other, returns a 
#             tuple of 3 items in this order: 
#             the element occurring most, how many times it occurs, and its type
#     '''
#     # Your code here
# For example,

# if L1 = ['a', 'a', 'b'] and L2 = ['a', 'b'] then is_list_permutation returns False
# if L1 = [1, 'b', 1, 'c', 'c', 1] and L2 = ['c', 1, 'b', 1, 1, 'c'] then is_list_permutation returns (1, 3, <class 'int'>) because the integer 1 occurs the most, 3 times, and the type of 1 is an integer (note that the third element in the tuple is not a string).
# Paste your entire function, including the definition, in the box below. Do not leave any debugging print statements.

def is_list_permutation(L1, L2):
    '''
    L1 and L2: lists containing integers and strings
    Returns False if L1 and L2 are not permutations of each other. 
            If they are permutations of each other, returns a 
            tuple of 3 items in this order: 
            the element occurring most, how many times it occurs, and its type
    '''
    dict1 = {x:L1.count(x) for x in L1}
    dict2 = {x:L2.count(x) for x in L2}
    values1 = dict1.values()
    keys1 = dict1.keys()
    values2 = dict2.values()
    keys2 = dict2.keys()
    mostOccurences = None
    mostOccurencesKey = None
    
    if len(keys1) == 0 and len(keys2) == 0:
        return (None, None, None)
    if len(dict1) == 0 and len(dict2) > 0:
        return False
    if len(dict1) > 0 and len(dict2) == 0 :
        return False        
    if len(keys1) != len(keys2):
        return False
    if len(values1) != len(values2):
        return False
    
    for key1 in keys1:
        #print (key1, ":", dict1[key1])
        key = key1
        if key in keys2:
            if dict2[key] == dict1[key]:
                mostOccurences = max(values1)
                #lookup key by value:
                mostOccurencesKey = list(dict1.keys())[list(dict1.values()).index(mostOccurences)]
            else:
                return False
        else:
            return False
    return (mostOccurencesKey, mostOccurences, type(mostOccurencesKey))

# is_list_permutation([1, 2, 1], [2, 1, 1])
# is_list_permutation([1, 1, 2, 2, 2], [1, 2, 2, 1, 2])
# is_list_permutation([0, 4, 8, 3, 2, 2, 1, 4, 7, 8, 3, 7, 0], [3, 4, 6, 2, 1, 2, 6, 7, 9, 8])
