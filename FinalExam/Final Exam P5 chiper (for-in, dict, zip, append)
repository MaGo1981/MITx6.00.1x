# Problem 5

# Problem 5

# Implement a function that meets the specifications below.

# def cipher(map_from, map_to, code):
#     """ map_from, map_to: strings where each contain 
#                           N unique lowercase letters. 
#         code: string (assume it only contains letters also in map_from)
#         Returns a tuple of (key_code, decoded).
#         key_code is a dictionary with N keys mapping str to str where 
#         each key is a letter in map_from at index i and the corresponding 
#         value is the letter in map_to at index i. 
#         decoded is a string that contains the decoded version 
#         of code using the key_code mapping. """
#     # Your code here
# For example,

# cipher("abcd", "dcba", "dab") returns (order of entries in dictionary may not be the same) ({'a':'d', 'b': 'c', 'd': 'a', 'c': 'b'}, 'adc')
# Paste your entire function, including the definition, in the box below. Do not leave any debugging print statements.

def cipher(map_from, map_to, code):
    """ map_from, map_to: strings where each contain 
                          N unique lowercase letters. 
        code: string (assume it only contains letters also in map_from)
        Returns a tuple of (key_code, decoded).
        key_code is a dictionary with N keys mapping str to str where 
        each key is a letter in map_from at index i and the corresponding 
        value is the letter in map_to at index i. 
        decoded is a string that contains the decoded version 
        of code using the key_code mapping. """
    key_list = []
    value_list = []
    decoded = ''
    for letterFrom in map_from:
        key_list.append(letterFrom)
    for letterTo in map_to:
        value_list.append(letterTo)
    key_code = dict(zip(key_list, value_list))
    for letter in code:
        decoded += key_code[letter]
    return (key_code, decoded)

({'e': 'l', 'i': 'a', 'r': 'c', 'd': 'c', 'o': 'o', 'p': 'o', 'n': 'n'}, 'oanoan')
