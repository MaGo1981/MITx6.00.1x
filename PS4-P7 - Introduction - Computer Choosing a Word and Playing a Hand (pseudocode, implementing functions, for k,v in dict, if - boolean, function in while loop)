Computer Choosing a Word and Playing a Hand


**Part B is dependent on your functions from ps4a.py, so be sure to complete ps4a.pybefore working on ps4b.py**
Now that you have completed your word game code, you decide that you would like to enable your computer (SkyNet) to play the game (your hidden agenda is to prove once and for all that computers are inferior to human intellect!) In this part, you will be able to compare how you as a user succeed in the game compared to the computer's performance.
You should look at the following two functions: compChooseWord and compPlayHand, before moving on to Problem 7 on the next page.
compChooseWord
If you follow the pseudocode for compChooseWord, you'll see that the code creates a computer player that is legal, but not always the best. Try to walk through and understand our implementation.
A Note On Runtime: You may notice that things run a bit slowly when the computer plays. This is to be expected - the wordList has 83667 words, after all! 
def compChooseWord(hand, wordList, n):
    """
    Given a hand and a wordList, find the word that gives 
    the maximum value score, and return it.

    This word should be calculated by considering all the words
    in the wordList.

    If no words in the wordList can be made from the hand, return None.

    hand: dictionary (string -> int)
    wordList: list (string)
    n: integer (HAND_SIZE; i.e., hand size required for additional points)

    returns: string or None
    """
    # Create a new variable to store the maximum score seen so far (initially 0)
    bestScore = 0
    # Create a new variable to store the best word seen so far (initially None)
    bestWord = None
    # For each word in the wordList
    for potential in wordList:
        # If you can construct the word from your hand
        # (hint: you can use isValidWord, or - since you don't really need to test if the word is in the wordList - you can make a similar function that omits that test)
        def validWord(word, hand):
            word2Dict = getFrequencyDict(word)
            for letter,count in word2Dict.items():
                if count > hand.get(letter, 0): #ako je broj koristenih slova veci od dopustenog, rijec nije ok â€“ vraca False
                    return False
            return True # ili vraca True
        if validWord(potential, hand): #ako je rijec valjana
            # Find out how much making that word is worth
            thisScore = getWordScore(potential, n)
            # If the score for that word is higher than your best score
            if thisScore > bestScore: # ako je rezultat veci od najboljeg dosad
                # Update your best score, and best word accordingly
                bestScore = thisScore # taj rezultat postaje najbolji
                bestWord = potential
    # return the best word you found.
    return bestWord
Test Cases to Understand the Code: 
>>> compChooseWord({'a': 1, 'p': 2, 's': 1, 'e': 1, 'l': 1}, wordList, 6) 
appels 
>>> compChooseWord({'a': 2, 'c': 1, 'b': 1, 't': 1}, wordList, 5) 
acta 
>>> compChooseWord({'a': 2, 'e': 2, 'i': 2, 'm': 2, 'n': 2, 't': 2}, wordList, 12) 
immanent 
>>> compChooseWord({'x': 2, 'z': 2, 'q': 2, 'n': 2, 't': 2}, wordList, 12) 
None
compPlayHand
Now that we have the ability to let the computer choose a word, we need to set up a function to allow the computer to play a hand - in a manner very similar to Part A's playHand function. This function allows the computer to play a given hand and is very similar to the earlier version in which a user selected the word, although deciding when it is done playing a particular hand is different.
def compPlayHand(hand, wordList, n):
    """
    Allows the computer to play the given hand, following the same procedure
    as playHand, except instead of the user choosing a word, the computer 
    chooses it.

    1) The hand is displayed.
    2) The computer chooses a word.
    3) After every valid word: the word and the score for that word is 
    displayed, the remaining letters in the hand are displayed, and the 
    computer chooses another word.
    4)  The sum of the word scores is displayed when the hand finishes.
    5)  The hand finishes when the computer has exhausted its possible
    choices (i.e. compChooseWord returns None).
 
    hand: dictionary (string -> int)
    wordList: list (string)
    n: integer (HAND_SIZE; i.e., hand size required for additional points)
    """
    score = 0
    while calculateHandlen(hand) > 0:
        print 'Current Hand:',
        displayHand(hand)
        compWord = compChooseWord(hand, wordList, n)
        if type(compWord) == str:
            score += getWordScore(compWord, n)
            print '"'+compWord+'"', 'earned', getWordScore(compWord, n), 'points. Total:', score, 'points.'
            hand = updateHand(hand, compWord)
        else:
            break
    print 'Total score:', score, 'points.'
Test Cases to Understand the Code: 
compPlayHand({'a': 1, 'p': 2, 's': 1, 'e': 1, 'l': 1}, wordList, 6)
Current Hand: a p p s e l
"appels" earned 110 points. Total: 110 points
Total score: 110 points.
compPlayHand({'a': 2, 'c': 1, 'b': 1, 't': 1}, wordList, 5) Current Hand: a a c b t "acta" earned 24 points. Total: 24 points Current Hand: b Total score: 24 points. compPlayHand({'a': 2, 'e': 2, 'i': 2, 'm': 2, 'n': 2, 't': 2}, wordList, 12)
Current Hand: a a e e i i m m n n t t
"immanent" earned 96 points. Total: 96 points

Current Hand: a e t i
"ait" earned 9 points. Total: 105 points

Current Hand: e
Total score: 105 points.
