# Problem 7

# Write a function called dict_invert that takes in a dictionary with immutable values and 
# returns the inverse of the dictionary. The inverse of a dictionary d is another dictionary 
# whose keys are the unique dictionary values in d. The value for a key in the inverse dictionary 
# is a sorted list (increasing order) of all keys in d that have the same value in d.

# Here are two examples:

# If d = {1:10, 2:20, 3:30} then dict_invert(d) returns {10: [1], 20: [2], 30: [3]}
# If d = {1:10, 2:20, 3:30, 4:30} then dict_invert(d) returns {10: [1], 20: [2], 30: [3, 4]}
# If d = {4:True, 2:True, 0:True} then dict_invert(d) returns {True: [0, 2, 4]}
# def dict_invert(d):
#     '''
#     d: dict
#     Returns an inverted dictionary according to the instructions above
#     '''
#     #YOUR CODE HERE
# Paste your entire function, including the definition, in the box below. 
# Do not leave any debugging print statements.

def dict_invert(d):
    '''
    d: dict
    Returns an inverted dictionary according to the instructions above
    '''
    dictInvert = {}
    for key in d.keys():
        invertKey = d[key]
        if invertKey not in dictInvert.keys():
            dictInvert[d[key]] = [key] # s desne strane smo vrijednost stavili u listu
        else:
            dictInvert[invertKey].append(key)
            dictInvert[invertKey].sort()
    return dictInvert
    
    
    
    
    
#d2 = {1:10, 2:20, 3:30} # then dict_invert(d) returns {10: [1], 20: [2], 30: [3]}
#d1 = {1:10, 2:20, 3:30, 4:30} # then dict_invert(d) returns {10: [1], 20: [2], 30: [3, 4]}
#d = {4:True, 2:True, 0:True} # then dict_invert(d) returns {True: [0, 2, 4]}
#d3 = {8: 6, 2: 6, 4: 6, 6: 6} # then dict_invert(d) returns {6: [2, 4, 6, 8]}
#example1 = dict_invert(d)
#example2 = dict_invert(d1)
#example3 = dict_invert(d2)
#example4 = dict_invert(d3)
#dict_invert({1: 6, 2: 3, 3: 2, 4: 1})
# dict_invert({1: 0, 2: True, 3: True, 4: True})
