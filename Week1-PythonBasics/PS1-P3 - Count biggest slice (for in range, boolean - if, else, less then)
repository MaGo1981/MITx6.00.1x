#Problem 3
#Assume s is a string of lower case characters.
#Write a program that prints the longest substring of s in which the letters occur in alphabetical order. For example,
#if s = 'azcbobobegghakl', then your program should print
#Longest substring in alphabetical order is: beggh
#In the case of ties, print the first substring. For example, if s = 'abcbcd', then your program should print
#Longest substring in alphabetical order is: abc
#Note: This problem may be challenging. We encourage you to work smart.
#If you've spent more than a few hours on this problem, we suggest that you move on to a different part of the course.
#If you have time, come back to this problem after you've had a break and cleared your head.

count = 0   
maxcount = 0
substringEnd = 0

for char in range(len(s) - 1):     # first time iterating char=0
    if (s[char] <= s[char + 1]):
        count += 1                   # length of the current substring
        if count > maxcount:
            maxcount = count        # length of the longest substring
            substringEnd = char + 1 # substringEnd is the last position of the longest substring (+1 because range starts with 0)
    else:
        count = 0                 # current substring has broken
substringStart = substringEnd - maxcount
print('Longest substring in alphabetical order is:', s[substringStart:substringEnd + 1])
